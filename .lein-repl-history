(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-json.core :as json]
            [clj-time.periodic :as periodic]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn jueveses [cnt]
  (partition cnt (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn get-jueveses [when cnt]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= when date)) cluster)) (jueveses cnt))))
(defn choosen [date]
  (let [jvs (get-jueveses date (count (models/all)))]
    (nth (ppl-sort (.indexOf jvs (jueveses (count (models/all)))) (models/all)) (.indexOf jvs date))))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(defn index [req]
  (response/render (clostache/render (slurp (io/resource "templates/index.html")) (zipmap [:year :month :day :hour :minutes] (split ((req :query-params) "date") #"-"))) req))
(defroutes app
  (GET "/" [] index)
  (GET "/facturas" [] facturas)
  (route/resources "/" {:root "templates"})
  (route/not-found (slurp (io/resource "404.html"))))
;(nth (ppl 1) (.indexOf (faltan.controllers/get-jueveses (faltan.controllers/to-date "2013-5-30") 5) (faltan.controllers/to-date "2013-6-13")))
(json-response (choosen (time/date-time 2013 7 18)))
(choosen (time/date-time 2013 7 18))
(jueveses 4)
(jueveses)
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-json.core :as json]
            [clj-time.periodic :as periodic]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(def jueveses (partition (count models/all) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) jueveses)))
(defn choosen [date]
  (let [jvs (get-jueveses date (count (models/all)))]
    (nth (ppl-sort (.indexOf jvs (jueveses (count (models/all)))) (models/all)) (.indexOf jvs date))))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(defn index [req]
  (response/render (clostache/render (slurp (io/resource "templates/index.html")) (zipmap [:year :month :day :hour :minutes] (split ((req :query-params) "date") #"-"))) req))
(defroutes app
  (GET "/" [] index)
  (GET "/facturas" [] facturas)
  (route/resources "/" {:root "templates"})
  (route/not-found (slurp (io/resource "404.html"))))
(choosen (time/date-time 2013 7 14))
(choosen (time/date-time 2013 7 14))(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) jueveses)))
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs (jueveses (count (models/all)))) (models/all)) (.indexOf jvs date))))
(choosen (time/date-time 2013 7 14))
(choosen (time/date-time 2013 5 30))
(ppl-sort (.indexOf jvs (jueveses (count (models/all)))) (models/all))
(def jvs (get-jueveses (time/date-time 2013 5 30)))
(def jueveses (partition (count models/all) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-time.periodic :as periodic]
            [clj-json.core :as json]))
(use 'clj-time.periodic)
(def jueveses (partition (count models/all) (take 1000 (periodic-seq arbitrary-jueves (time/days 7)))))
(models/all)
(count (models/all))
(def jueveses (partition (count (models/all)) (take 1000 (periodic-seq arbitrary-jueves (time/days 7)))))
(choosen (time/date-time 2013 5 30))
(jueveses)
jueveses
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs jueveses) (models/all)) (.indexOf jvs date))))
(choosen (time/date-time 2013 5 30))
(json-response (choosen (to-date ((req :query-params) "date"))))
(json-response (choosen (time/date-time 2013 5 30)))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(use 'clj-json.core :as json)
(use 'clj-json.core)
(use 'clj-json)
(use 'clj-json.core)
(require '(clj-json [core :as json]))
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-time.periodic :as periodic]
            [clj-json.core :as json]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(def jueveses (partition (count (models/all)) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) jueveses)))
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs jueveses) (models/all)) (.indexOf jvs date))))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(defn index [req]
  (response/render (clostache/render (slurp (io/resource "templates/index.html")) (zipmap [:year :month :day :hour :minutes] (split ((req :query-params) "date") #"-"))) req))
(defroutes app
  (GET "/" [] index)
  (GET "/facturas" [] facturas)
  (route/resources "/" {:root "templates"})
  (route/not-found (slurp (io/resource "404.html"))))
  (json-response (choosen (to-date ((req :query-params) "date")))))
(json-response (choosen (to-date ((req :query-params) "date"))))
(json-response (choosen (time/date-time 2013 5 30)))
(or (System/getenv "DATABASE_URL") db)
(let [db-host "localhost"
      db-port 5432
      db-name "facturas"]
 
  (def db {:classname "org.postgresql.Driver"
           :subprotocol "postgresql"
           :subname (str "//" db-host ":" db-port "/" db-name)
           :user "postgres"
           :password "chango"}))
(or (System/getenv "DATABASE_URL") db)
(System/getProperties)
(System/getenv)
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-time.periodic :as periodic]
            [clj-json.core :as json]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(defn jueveses [] (partition (count (models/all)) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) (jueveses))))
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs (jueveses)) (models/all)) (.indexOf jvs date))))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(defn index [req]
  (response/render (slurp (io/resource "templates/index.html")) req))
(defn faltan [req]
  (response/render (clostache/render (slurp (io/resource "templates/faltan.html")) (zipmap [:year :month :day :hour :minutes] (split ((req :query-params) "date") #"-"))) req))
(defroutes app
  (GET "/" [] index)
  (GET "/facturas" [] facturas)
  (route/resources "/" {:root "templates"})
  (route/not-found (slurp (io/resource "404.html"))))
(jueveses)
(partition
 (1 2 3 4))
(partition [1 2 3 4])
(partition 2 [1 2 3 4])
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-time.periodic :as periodic]
            [clj-json.core :as json]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(defn jueveses [] (partition (count (models/all)) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) (jueveses))))
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs (jueveses)) (models/all)) (.indexOf jvs date))))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(defn index [req]
  (response/render (slurp (io/resource "templates/index.html")) req))
(defn faltan [req]
  (response/render (clostache/render (slurp (io/resource "templates/faltan.html")) (zipmap [:year :month :day :hour :minutes] (split ((req :query-params) "date") #"-"))) req))
(defroutes app
  (GET "/" [] index)
  (GET "/facturas" [] facturas)
  (route/resources "/" {:root "templates"})
  (route/not-found (slurp (io/resource "404.html"))))
(take 1000 (repeat 5))
repeat 5
(first (repeat 5))
(take 1000 (filter (== 5) (repeat 5)))
(take 1000 (filter (= 5) (repeat 5)))
(take 1000 (filter (fn [n] (== n 5)) (repeat 5)))
(head (filter (fn [n] (== n 5)) (repeat 5)))
(take 1000 (filter (fn [n] (== n 5)) (repeat 5)))
(head (filter (fn [n] (== n 5)) (repeat 5)))
(first (filter (fn [n] (== n 5)) (repeat 5)))
(take 1000 (filter (fn [n] (== n 5)) (repeat 5)))
(take 1000 (filter (fn [n] (== n 5)) ((partition 3 (repeat 5))))
(take 1000 (filter (fn [n] (== n 5)) (partition 4 (repeat 5)))
(take 1000 (filter (fn [n] (== n 5)) (partition 4 (repeat 5))))
(take 1000 (filter (fn [n] True) (partition 4 (repeat 5))))
(take 1000 (filter (fn [n] true) (partition 4 (repeat 5))))
(first (filter (fn [n] true) (partition 4 (repeat 5))))
(first (filter (fn [n] some (fn [b] (== b 5))) (partition 4 (repeat 5))))
(defn jueveses [] (partition (count (models/all)) (periodic/periodic-seq arbitrary-jueves (time/days 7))))
(ns faltan.controllers
  (:require [compojure.core :refer [defroutes GET PUT POST DELETE ANY]]
            [clojure.string :as str]
            [compojure.route :as route]
            [compojure.response :as response]
            [clostache.parser :as clostache]
            [clojure.string :refer [split]]
            [clojure.java.io :as io]
            [faltan.models :as models]
            [ring.util.response :as ring]
            [clj-time.core :as time]
            [clj-time.format :as format]
            [clj-time.periodic :as periodic]
            [clj-json.core :as json]))
(def formatd (format/formatters :year-month-day))
(def arbitrary-jueves (time/date-time 2013 4 25))
(defn jueveses [] (partition (count (models/all)) (take 1000 (periodic/periodic-seq arbitrary-jueves (time/days 7)))))
(defn json-response [data & [status]]
  {:status (or status 200)
   :headers {"Content-Type" "application/json"}
   :body (json/generate-string data)})
(defn rndm [seed max]
  (let [r (java.util.Random. seed)]
    (.nextInt r max)))
(defn ppl-sort [pos coll]
  (sort-by first (map-indexed
    (fn [idx item] [(rndm (inc idx) (+ 10000 pos)) item]) coll)))
(defn to-date [str]
  (format/parse formatd str))
(defn from-date [date]
  (format/unparse formatd date))
(defn get-jueveses [whend]
  (first (filter (fn [cluster]
    (some (fn [date]
      (= whend date)) cluster)) (jueveses))))
;[8774,{"picture":null,"name":"facundo","id":2}]
(defn choosen [date]
  (let [jvs (get-jueveses date)]
    (nth (ppl-sort (.indexOf jvs (jueveses)) (models/all)) (.indexOf jvs date))))
(defn index [req]
  (response/render (slurp (io/resource "templates/index.html")) req))
(defn facturas [req]
  (json-response (choosen (to-date ((req :query-params) "date")))))
(to-date "2013-05-23")
(choosen (to-date "2013-05-23"))
(first (choosen (to-date "2013-05-23")))
(last (choosen (to-date "2013-05-23")))
(second (choosen (to-date "2013-05-23")))
(use 'faltan.web)
(toca-plain
)
(faltan.web/toca-plain)
(faltan.controllers/toca-plain "2013-07-22")
(use 'faltan.migration)
(require 'faltan.migration)
(faltan.migration/create-tables)
(require 'faltan.migration)
(require 'faltan.migration :reload)
(require 'faltan.migration)
(doc clojure.java.jdbc)
(doc 'clojure.java.jdbc)
(doc clojure.java.jdbc/insert-records)
(require 'faltan.migration)
(faltan.migration/insert-members)
(use 'faltan.controllers)
(toca-plain "2013-07-22)
)
(toca-plain "2013-07-22")
(toca "2013-07-22")
(require 'faltan.web)
(toca "2013-07-22")
(faltan.controllers/toca "2013-7-22")
(all)
(faltan.models/all)
(faltan.controllers/choosen "2013-07-22")
(faltan.controllers/get-jueveses "2013-07-22")
(faltan.controllers/get-jueveses (faltan.controllers/to-date "2013-07-22"))
(faltan.controllers/to-date "2013-07-22")
(faltan.controllers/get-jueveses (faltan.controllers/to-date "2013-07-25"))
(toca-plain "2013-07-25")
(require 'faltan.controllers :reload)
(toca-plain "2013-07-25")
(require 'faltan.controllers :reload)
(toca-plain "2013-07-25")
(require 'faltan.controllers :reload)
(toca-plain "2013-07-25")
(use faltan)
(use 'faltan)
(use 'faltan.controllers)
(use 'compojure)
(use 'compojure.core)
(run-server)
(facturas)
(use 'compojure.handler)
(use 'compojure)
(use 'compojure.response)
(render "lala")
(render "lala" {:status 400 :headers {"Content" "html"}})
(use 'hiccup.page)
(html5 (p "lala"))
(use 'hiccup.core)
(html5 (p "lala"))
(html (html5 (p "lala")))
(html (html5 (a "lala")))
(html (html5 ))
(html (html5 [:p "lala"]))
(html5 [:p "lala"])
(use 'hiccup.form)
(form-to [:post "lala"])
(use 'faltan.models)
(all)
(first (all))
((first (all)) :name)
(use 'hiccup.core)
(html [p])
(html [:p])
(html [:ul (for [x ["a" "b" "c"])
(for [x ["x" "y"]] x)
(into [] (for [x ["x" "y"]] x))
[:ul (for [x ["a" "b" "c"]] x)]
[:ul (for [x [:li "a" :li "b" :li "c"]] x)]
[:ul (into [] (for [x [:li "a" :li "b" :li "c"]] x))]
[:ul (into [] (for [x ["a" "b" "c"]] [:li x]))]
[:ul (into [] (flatten (for [x ["a" "b" "c"]] [:li x])))]
(cons :ul [:li "a"])
(cons :ul '(:li "a"))
(use 'hiccup.core)
(html
      (cons :ul (flatten (for [person ppl]
        [:li (:name person)]))))
(html    (html (cons :ul (flatten (for [person ppl] [:li (:name person)]))))))
    (html (cons :ul (flatten (for [person ppl] [:li (:name person)]))))))
    (html (cons :ul (flatten (for [person ["a" "b"]] [:li person]))))))
    (html (cons :ul (flatten (for [person ["a" "b"]] [:li person]))))
(flatten [:l1 "a" :li "b"])
(cons :ul (flatten [:l1 "a" :li "b"]))
(cons :ul (flatten (for [person ["a" "b"]] [:li person])))
(into [] (cons :ul (flatten (for [person ["a" "b"]] [:li person]))))
(html
      [:ul (into [] (for [person ppl]
        [:li (:name person)]))])
(use 'hiccup.core)
(html
      [:ul (into [] (for [person ppl]
        [:li (:name person)]))])
(def ppl [{:name "lala"} {:name "jaja"}])
(html
      [:ul (into [] (for [person ppl]
        [:li (:name person)]))])
[:ul (into [] (for [person ppl]
        [:li (:name person)]))]
(cons
[:ul] :a)
(cons :ul [:li])
      [:ul (into [] (for [person ppl] [:li (:name person)]))])))
(concat [:ul] (for [person ppl] [:li (:name person)]))
(into [] (concat [:ul] (for [person ppl] [:li (:name person)])))
(into [:ul] '(1 2))
(into [:ul]  (for [person ppl] [:li (:name person)]))
(use environ.core)
(use 'environ.core)
(env :production)
(use 'environ.core)
(use 'environ.core :reload)
(env :production)
